{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## WAT?\r\n\r\nFlavourSaver is a ruby-based implementation of the [Handlebars.js](http://handlebars.js)\r\ntemplating language. FlavourSaver supports Handlebars template rendering natively on \r\nRails and on other frameworks (such as Sinatra) via Tilt.\r\n\r\nPlease use it, break it, and send issues/PR's for improvement.\r\n\r\n## License\r\n\r\nFlavourSaver is Copyright (c) 2012 Sociable Limited and licensed under the terms\r\nof the MIT Public License (see the LICENSE file included with this distribution\r\nfor more details).\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'flavour_saver'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install flavour_saver\r\n\r\n## Usage\r\n\r\nFlavourSaver provides an interface to the amazing\r\n[Tilt](https://github.com/rtomayko/tilt) templating library, meaning that it\r\nshould work with anything that has Tilt support (Sinatra, etc) and has a \r\nnative Rails template handler.\r\n\r\n## Status\r\n\r\nFlavourSaver is in it's infancy, your pull requests are greatly appreciated.\r\n\r\nCurrently supported:\r\n\r\n  - Expressions:\r\n    - with object-paths (`{{some.method.chain}}`)\r\n    - containing object-literals (`{{object.['index'].method}}`):\r\n      Ruby's `:[](index)` method is called for literals, making FlavourSaver\r\n      compatible with `Hash` and hashlike objects.\r\n    - with list arguments (`{{method arg1 \"arg2\"}}`)\r\n    - with hash arguments (`{{method foo=bar bar=\"baz\"}}`)\r\n    - with list and hash arguments (`{{method arg1 arg2 foo=bar bar=\"baz\"}}`)\r\n      provided that the hash is the last argument.\r\n    - Comments (`{{! a comment}}`)\r\n    - Expression output is HTML escaped\r\n  - Safe expressions\r\n    - Expressions wrapped in triple-stashes are not HTML escaped (`{{{an expression}}}`)\r\n  - Block expressions\r\n    - Simple API for adding block helpers.\r\n\r\nComing soon:\r\n  - Partials\r\n\r\n## Helpers\r\n\r\nFlavourSaver implements the following helpers by default:\r\n\r\n### #with\r\n\r\nYields it's argument into the context of the block contents:\r\n\r\n```handlebars\r\n{{#with person}}\r\n  {{name}}\r\n{{/with}}\r\n```\r\n\r\n### #each\r\n\r\nTakes a single collection argument and yeilds the block's contents once \r\nfor each member of the collection:\r\n\r\n```handlebars\r\n{{#each people}}\r\n  {{name}}\r\n{{/each}}\r\n```\r\n\r\n### #if\r\n\r\nTakes a single argument and yields the contents of the block if that argument\r\nis truthy.\r\n\r\n```handlebars\r\n{{#if person}}\r\n  Hi {{person.name}}!\r\n{{/if}}\r\n```\r\n\r\nIt can also handle a special case `{{else}}` expression:\r\n\r\n```handlebars\r\n{{#if person}}\r\n  Hi {{person.name}}!\r\n{{else}}\r\n  Nobody to say hi to.\r\n{{/if}}\r\n```\r\n\r\n### #unless\r\n\r\nExactly the same is `#if` but backwards.\r\n\r\n### this\r\n\r\nIn JavaScript this is a native keyword, in Ruby not-so-much. FlavourSaver's `this` helper\r\nreturns `self`:\r\n\r\n```handlebars\r\n{{#each names}}\r\n  {{this}}\r\n{{/each}}\r\n```\r\n\r\n### Adding additional helpers\r\n\r\nAdditional helpers can easy be added by calling `FS.register_helper`, eg:\r\n\r\n```ruby\r\nFW.register_helper(:whom) do\r\n 'world'\r\n```\r\n\r\nNow if you were to render the following template:\r\n\r\n```handlebars\r\n<h1>Hello {{whom}}!</h1>\r\n```\r\n\r\nYou would receive the following output:\r\n\r\n```html\r\n<h1>Hello world!</h1>\r\n```\r\n\r\n### Adding block helpers\r\n\r\nCreating a block helper works exactly like adding a regular helper, except that\r\nthe helper implementation can call `yield.contents` one or more times, with an\r\noptional argument setting the context of the block execution:\r\n\r\n```ruby\r\nFW.register_helper(:three_times) do\r\n  yield.contents\r\n  yield.contents\r\n  yield.contents\r\nend\r\n```\r\n\r\nWhich when called with the following template:\r\n\r\n```handlebars\r\n{{#three_times}}\r\n  hello\r\n{{/three_times}}\r\n```\r\n\r\nwould result in the following output:\r\n```\r\n  hello\r\n  hello\r\n  hello\r\n```\r\n\r\nImplementing a simple iterator is dead easy:\r\n\r\n```ruby\r\nFW.register_helper(:list_people) do |people|\r\n  people.each do |person|\r\n    yield.contents person\r\n  end\r\nend\r\n```\r\n\r\nWhich could be used like so:\r\n\r\n```handlebars\r\n{{#list_people people}}\r\n  <b>{{name}}<b><br />\r\n  Age: {{age}}<br />\r\n  Sex: {{sex}}<br />\r\n{{/list_people}}\r\n```\r\n\r\nBlock helpers can also contain an `{{else}}` statement, which, when used creates\r\na second set of block contents (called `inverse`) which can be yielded to the output:\r\n\r\n```ruby\r\nFW.register_helper(:isFemale) do |person,&block|\r\n  if person.sex == 'female'\r\n    block.call.contents\r\n  else\r\n    block.call.inverse\r\n  end\r\nend\r\n```\r\n\r\nYou can also register an existing method:\r\n\r\n```ruby\r\ndef isFemale(person)\r\n  if person.sex == 'female'\r\n    yield.contents\r\n  else\r\n    yield.inverse\r\n  end\r\nend\r\n\r\nFW.register_helper(method(:isFemale))\r\n```\r\n\r\nWhich could be used like so:\r\n\r\n```handlebars\r\n{{#isFemale person}}\r\n  {{person.name}} is female.\r\n{{else}}\r\n  {{person.name}} is male.\r\n{{/isFemale}}\r\n```\r\n\r\n## Using with Rails\r\n\r\nOne potential gotcha of using FlavourSaver with Rails is that FlavourSaver doesn't let you\r\nhave any access to the controller's instance variables. This is done to maintain compatibility\r\nwith the original JavaScript implementation of Handlebars so that templates can be used on\r\nboth the server and client side without any change.\r\n\r\nWhen accessing controller isntance variables you should access them by way of a helper method\r\nor a presenter object.\r\n\r\nFor example, in `ApplicationController.rb` you may have a `before_filter` which authenticates\r\nthe current user's session cookie and stores it in the controller's `@current_user` instance\r\nvariable.\r\n\r\nTo access this variable you could create a simple helper method in `ApplicationHelpers`:\r\n\r\n```ruby\r\ndef current_user\r\n  @current_user\r\nend\r\n```\r\n\r\nWhich would mean that you are able to access it in your template:\r\n\r\n```handlebars\r\n{{#if current_user}}\r\n  Welcome back, {{current_user.first_name}}!\r\n{{/if}}\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","name":"FlavourSaver","tagline":"Handlebars.js without the .js","google":""}