{"body":"# FlavourSaver\r\n\r\nFlavourSaver is a pure-ruby implimentation of the [Handlebars](http://handlebarsjs.com)\r\ntemplating language.\r\n\r\n## License\r\n\r\nFlavourSaver is Copyright (c) 2012 Sociable Limited and licensed under the terms\r\nof the MIT Public License (see the LICENSE file included with this distribution\r\nfor more details).\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'flavour_saver'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install flavour_saver\r\n\r\n## Usage\r\n\r\nFlavourSaver provides an interface to the amazing\r\n[Tilt](https://github.com/rtomayko/tilt) templating library, meaning that it\r\nshould work with anything that has Tilt support (Sinatra, Rails, etc)\r\n\r\n## Status\r\n\r\nFlavourSaver is in it's infancy, your pull requests are greatly appreciated.\r\n\r\nCurrently supported:\r\n\r\n  - Expressions:\r\n    - with object-paths (`{{some.method.chain}}`)\r\n    - containing object-literals (`{{object.['index'].method}}`):\r\n      Ruby's `:[](index)` method is called for literals, making FlavourSaver\r\n      compatible with `Hash` and hashlike objects.\r\n    - with list arguments (`{{method arg1 \"arg2\"}}`)\r\n    - with hash arguments (`{{method foo=bar bar=\"baz\"}}`)\r\n    - with list and hash arguments (`{{method arg1 arg2 foo=bar bar=\"baz\"}}`)\r\n      provided that the hash is the last argument.\r\n    - Comments (`{{! a comment}}`)\r\n    - Expression output is HTML escaped\r\n  - Safe expressions\r\n    - Expressions wrapped in triple-stashes are not HTML escaped (`{{{an expression}}}`)\r\n  - Block expressions\r\n    - Simple API for adding block helpers.\r\n\r\nComing soon:\r\n  - Partials\r\n\r\n## Helpers\r\n\r\nFlavourSaver implements the following helpers by default:\r\n\r\n### #with\r\n\r\nYields it's argument into the context of the block contents:\r\n\r\n```handlebars\r\n{{#with person}}\r\n  {{name}}\r\n{{/with}}\r\n```\r\n\r\n### #each\r\n\r\nTakes a single collection argument and yeilds the block's contents once \r\nfor each member of the collection:\r\n\r\n```handlebars\r\n{{#each people}}\r\n  {{name}}\r\n{{/each}}\r\n```\r\n\r\n### #if\r\n\r\nTakes a single argument and yields the contents of the block if that argument\r\nis truthy.\r\n\r\n```handlebars\r\n{{#if person}}\r\n  Hi {{person.name}}!\r\n{{/if}}\r\n```\r\n\r\nIt can also handle a special case `{{else}}` expression:\r\n\r\n```handlebars\r\n{{#if person}}\r\n  Hi {{person.name}}!\r\n{{else}}\r\n  Nobody to say hi to.\r\n{{/if}}\r\n```\r\n\r\n### #unless\r\n\r\nExactly the same is `#if` but backwards.\r\n\r\n### this\r\n\r\nIn JavaScript this is a native keyword, in Ruby not-so-much. FlavourSaver's `this` helper\r\nreturns `self`:\r\n\r\n```handlebars\r\n{{#each names}}\r\n  {{this}}\r\n{{/each}}\r\n```\r\n\r\n### Adding additional helpers\r\n\r\nAdditional helpers can easy be added by calling `FS.register_helper`, eg:\r\n\r\n```ruby\r\nFS.register_helper(:people) do\r\n  [\r\n    { firstName: 'Yehuda', lastName: 'Katz' },\r\n    { firstName: 'Carl', lastName: 'Lerche' },\r\n    { firstName: 'Alan', lastName: 'Johnson' },\r\n  ]\r\nend\r\n```\r\n\r\nBlock helpers can simply yield from the blocks body:\r\n\r\n```ruby\r\nFS.register_helper(:list) do |people|\r\n  \"<ul>\\n  <li>#{people.join(\"</li>\\n  <li>\"\")}</li>\\n</ul>\"\r\nend\r\n```\r\n\r\nSo rendering the following template:\r\n\r\n```handlebars\r\n{{#list people}}{{firstName}} {{lastName}}{{/list}}\r\n```\r\n\r\nWould output:\r\n\r\n```html\r\n<ul>\r\n  <li>Yehuda Katz</li>\r\n  <li>Carl Lerge</li>\r\n  <li>Alan Johnson</li>\r\n</ul>\r\n```\r\n\r\n### Adding block helpers\r\n\r\nCreating a block helper works exactly like adding a regular helper, except that\r\nthe helper implementation can call `yield.contents` one or more times, with an\r\noptional argument setting the context of the block execution:\r\n\r\n```ruby\r\nFW.register_helper(:three_times) do\r\n  yield.contents\r\n  yield.contents\r\n  yield.contents\r\nend\r\n```\r\n\r\nWhich when called with the following template:\r\n\r\n```handlebars\r\n{{#three_times}}\r\n  hello\r\n{{/three_times}}\r\n```\r\n\r\nwould result in the following output:\r\n```\r\n  hello\r\n  hello\r\n  hello\r\n```\r\n\r\nImplementing a simple iterator is dead easy:\r\n\r\n```ruby\r\nFW.register_helper(:list_people) do |people|\r\n  people.each do |person|\r\n    yield.contents person\r\n  end\r\nend\r\n```\r\n\r\nWhich could be used like so:\r\n\r\n```handlebars\r\n{{#list_people people}}\r\n  <b>{{name}}<b><br />\r\n  Age: {{age}}<br />\r\n  Sex: {{sex}}<br />\r\n{{/list_people}}\r\n```\r\n\r\nBlock helpers can also contain an `{{else}}` statement, which, when used creates\r\na second set of block contents (called `inverse`) which can be yielded to the output:\r\n\r\n```ruby\r\nFW.register_helper(:isFemale) do |person,&block|\r\n  if person.sex == 'female'\r\n    block.call.contents\r\n  else\r\n    block.call.inverse\r\n  end\r\nend\r\n```\r\n\r\nYou can also register an existing method:\r\n\r\n```ruby\r\ndef isFemale(person)\r\n  if person.sex == 'female'\r\n    yield.contents\r\n  else\r\n    yield.inverse\r\n  end\r\nend\r\n\r\nFW.register_helper(method(:isFemale))\r\n```\r\n\r\nWhich could be used like so:\r\n\r\n```handlebars\r\n{{#isFemale person}}\r\n  {{person.name}} is female.\r\n{{else}}\r\n  {{person.name}} is male.\r\n{{/isFemale}}\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Pure-ruby Handlebars parser based on RLTK.","name":"Flavoursaver","google":""}